
/*! layer mobile-v1.7 弹层组件移动版  */
;!function(a){"use strict";var b=document,c="querySelectorAll",d="getElementsByClassName",e=function(a){return b[c](a)},f={type:0,shade:!0,shadeClose:!0,fixed:!0,anim:!0},g={extend:function(a){var b=JSON.parse(JSON.stringify(f));for(var c in a)b[c]=a[c];return b},timer:{},end:{}};g.touch=function(a,b){var c;return/Android|iPhone|SymbianOS|Windows Phone|iPad|iPod/.test(navigator.userAgent)?(a.addEventListener("touchmove",function(){c=!0},!1),void a.addEventListener("touchend",function(a){a.preventDefault(),c||b.call(this,a),c=!1},!1)):a.addEventListener("click",function(a){b.call(this,a)},!1)};var h=0,i=["layermbox"],j=function(a){var b=this;b.config=g.extend(a),b.view()};j.prototype.view=function(){var a=this,c=a.config,f=b.createElement("div");a.id=f.id=i[0]+h,f.setAttribute("class",i[0]+" "+i[0]+(c.type||0)),f.setAttribute("index",h);var g=function(){var a="object"==typeof c.title;return c.title?'<h3 style="'+(a?c.title[1]:"")+'">'+(a?c.title[0]:c.title)+'</h3><button class="layermend"></button>':""}(),j=function(){var a,b=(c.btn||[]).length;return 0!==b&&c.btn?(a='<span type="1">'+c.btn[0]+"</span>",2===b&&(a='<span type="0">'+c.btn[1]+"</span>"+a),'<div class="layermbtn">'+a+"</div>"):""}();if(c.fixed||(c.top=c.hasOwnProperty("top")?c.top:100,c.style=c.style||"",c.style+=" top:"+(b.body.scrollTop+c.top)+"px"),2===c.type&&(c.content='<i></i><i class="laymloadtwo"></i><i></i>'),f.innerHTML=(c.shade?"<div "+("string"==typeof c.shade?'style="'+c.shade+'"':"")+' class="laymshade"></div>':"")+'<div class="layermmain" '+(c.fixed?"":'style="position:static;"')+'><div class="section"><div class="layermchild '+(c.className?c.className:"")+" "+(c.type||c.shade?"":"layermborder ")+(c.anim?"layermanim":"")+'" '+(c.style?'style="'+c.style+'"':"")+">"+g+'<div class="layermcont">'+c.content+"</div>"+j+"</div></div></div>",!c.type||2===c.type){var k=b[d](i[0]+c.type),l=k.length;l>=1&&layer.close(k[0].getAttribute("index"))}document.body.appendChild(f);var m=a.elem=e("#"+a.id)[0];c.success&&c.success(m),a.index=h++,a.action(c,m)},j.prototype.action=function(a,b){var c=this;if(a.time&&(g.timer[c.index]=setTimeout(function(){layer.close(c.index)},1e3*a.time)),a.title){var e=b[d]("layermend")[0],f=function(){a.cancel&&a.cancel(),layer.close(c.index)};g.touch(e,f)}var h=function(){var b=this.getAttribute("type");0==b?(a.no&&a.no(),layer.close(c.index)):a.yes?a.yes(c.index):layer.close(c.index)};if(a.btn)for(var i=b[d]("layermbtn")[0].children,j=i.length,k=0;j>k;k++)g.touch(i[k],h);if(a.shade&&a.shadeClose){var l=b[d]("laymshade")[0];g.touch(l,function(){layer.close(c.index,a.end)})}a.end&&(g.end[c.index]=a.end)},a.layer={v:"1.7",index:h,open:function(a){var b=new j(a||{});return b.index},close:function(a){var c=e("#"+i[0]+a)[0];c&&(c.innerHTML="",b.body.removeChild(c),clearTimeout(g.timer[a]),delete g.timer[a],"function"==typeof g.end[a]&&g.end[a](),delete g.end[a])},closeAll:function(){for(var a=b[d](i[0]),c=0,e=a.length;e>c;c++)layer.close(0|a[0].getAttribute("index"))}},"function"==typeof define?define(function(){return layer}):function(){var a=document.scripts,c=a[a.length-1],d=c.src,e=d.substring(0,d.lastIndexOf("/")+1);c.getAttribute("merge")}()}(window);
(function($, win) {
/*	$.getLocation = function(backcall, error) {
		var m = this;
		m.showPosition = function(position) {
			//$("#latlon").html(''+"纬度:"+position.coords.latitude +'，经度:'+ position.coords.longitude);
			var latlon = position.coords.latitude + ',' + position.coords.longitude;
			//var latlon = "30.432779,114.876437";
			// 转换为百度坐标
			//baidu
			var url = "http://api.map.baidu.com/geocoder/v2/?ak=C93b5178d7a8ebdb830b9b557abce78b&callback=renderReverse&location=" + latlon + "&output=json&pois=0&coordtype=wgs84ll";
			$.ajax({
				type: "GET",
				dataType: "jsonp",
				url: url,
				success: function(json) {
					if (json.status == 0) {
						var ret = {
							//addressComponent":{"adcode":"421102","city":"黄冈市","country":"中国","direction":"附近","distance":"22","district":"黄州区","province":"湖北省","street":"西湖二路","street_number":"7号"
							province: json.result.addressComponent.province,
							//省份
							city: json.result.addressComponent.city,
							//城市
							region: json.result.addressComponent.district,
							//地区
							street: json.result.addressComponent.street,
							//道路
							street_num: json.result.addressComponent.street_number,
							//门牌号
							address: json.result.addressComponent.street + json.result.addressComponent.street_number,
							//地址  
							semadesc: json.result.sematic_description,
							//附近建筑物地址
							fulladdress: json.result.formatted_address //完整地址
						};
						$.isFunction(backcall) != null && (backcall(ret));
						console.log(JSON.stringify(json.result));
					}
				},
				error: function(XMLHttpRequest, textStatus, errorThrown) {
					m.backerror(latlon + "地址位置获取失败");
				}
			});
		};
		m.backerror = function(info) {
			$.isFunction(error) && error(info);
		};
		m.showError = function(err) {
			switch (err.code) {
			case err.PERMISSION_DENIED:
				m.backerror("定位失败,用户拒绝请求地理定位");
				break;
			case err.POSITION_UNAVAILABLE:
				m.backerror("定位失败,位置信息是不可用");
				break;
			case err.TIMEOUT:
				m.backerror("定位失败,请求获取用户位置超时");
				break;
			case err.UNKNOWN_ERROR:
				m.backerror("定位失败,定位系统失效");
				break;
			}
		};
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(m.showPosition, m.showError, {
				// 指示浏览器获取高精度的位置，默认为false
				enableHighAccuracy: true,
				// 指定获取地理位置的超时时间，默认不限时，单位为毫秒
				timeout: 5000,
				// 最长有效期，在重复获取地理位置时，此参数指定多久再次获取位置。
				maximumAge: 3000
			});
		} else {
			m.backerror("浏览器不支持地理定位。");
		}
	}*/
	// 公用方法
	win.loadding = function(){top.layer.open({type: 2,time: 7});}
	win.tips = function(mess,endfn){
		top.layer.closeAll('loading');
		top.layer.open({
		content: mess,
		style: 'background-color:#E81A62; color:#fff; border:none;',
		time: 3,
		end:function(){endfn && endfn()}
		});}
	win.realAlert = win.alert;
	win.alert =  function(mess){
		var info=mess,btnyes = null,btnlabel='知道了';
		if($.isArray(mess)){
			info=mess[0];
			btnyes=mess[1];
			mess[2] && (btnlabel=mess[2])
			top.layer.open({
				content: info,
				btn: [btnlabel],
				yes: function(index){btnyes && btnyes();layer.close(index);}
			})
		}else{win.tips(info)}

	}
	win.realConfirm = win.confirm;
	win.confirm = function(mess,bnYes,bnNo)
	{
		if(bnYes == undefined && bnNo == undefined)
		{
			return eval("window.realConfirm(mess)");
		}
		else
		{
			return top.layer.open({
				content: mess,
				btn: ['确认', '取消'],
				shadeClose: false,
				yes: function(index){bnYes && bnYes();layer.close(index);},
				no: function(index){bnNo && bnNo();layer.close(index);},
			});
	
		}
	};
	//倒计时插件
	$.fn.downCount = function () {
		
		return this.each(function(){
			var settings = {
				date: Date.UTC(2050, 0, 1),
				endate:new Date(),
				uitype:0,
				uilabela:"距开始|距结束",
				uilabelb:""
			},_this = $(this),f={},o={};
			if(_this.data("date"))o.date = new Date(parseInt(_this.data("date")+"001"));
			if(_this.data("endate"))o.endate = new Date(parseInt(_this.data("endate")+"001"));
			if(_this.data("type"))o.uitype = parseInt(_this.data("type"));
			if(_this.data("labela"))o.uilabela = String(_this.data("labela"));
			if(_this.data("labelb"))o.uilabelb = String(_this.data("labelb"));
			f.o = $.extend(settings,o);
			f.o.uilabela = f.o.uilabela.split("|");f.o.uilabelb = f.o.uilabelb.split("|");
			//执行工厂
			f.countdown = function () {
				var retjson={uihtml:[],isEnd:false},difference = f.o.date.getTime() - new Date().getTime();
				retjson.statea = f.o.uilabela[0];
				retjson.stateb = f.o.uilabelb[0];
				//还没开始
				if (difference < 0) {//已经开始了
					//difference = 0-difference;
					difference = f.o.endate.getTime() - new Date().getTime();
					//已经结束了
					f.o.uilabela[1] && (retjson.statea = f.o.uilabela[1]);
					f.o.uilabelb[1] && (retjson.stateb = f.o.uilabelb[1]);
					if (difference < 0) {//已经结束了
						retjson.isEnd = true;
					}

				};
				var _second = 1000,
					_minute = _second * 60,
					_hour = _minute * 60,
					_day = _hour * 24,
					days = Math.floor(difference / _day),
					hours = Math.floor((difference % _day) / _hour),
					minutes = Math.floor((difference % _hour) / _minute),
					seconds = Math.floor((difference % _minute) / _second);
		
					retjson.days = (String(days).length >= 2) ? days : '0' + days;
					retjson.hours = (String(hours).length >= 2) ? hours : '0' + hours;
					retjson.minutes = (String(minutes).length >= 2) ? minutes : '0' + minutes;
					retjson.seconds = (String(seconds).length >= 2) ? seconds : '0' + seconds;
					
				return retjson;
		
			};
			f.uiem = function (s){return '<span><em>' + String(s).split('').join("</em><em>") + '</em></span>'};
			f.uispan = function(s,c){return "<span class='cd_"+c+"'>"+ s+ "</span>"};
			f.ui = function (){
				// set to DOM
				var c = f.countdown(),
				days = f.uiem(c.days),
				hours = f.uiem(c.hours),
				minutes = f.uiem(c.minutes),
				seconds = f.uiem(c.seconds);
				c.uihtml.push(f.uispan(c.statea,"cura"));
				switch(f.o.uitype)
				{
				case 1:
					c.uihtml.push(days);
					c.uihtml.push(f.uispan("天"));
					c.uihtml.push(hours);
					c.uihtml.push(f.uispan("时"));
					c.uihtml.push(minutes);
					c.uihtml.push(f.uispan("分"));
					c.uihtml.push(seconds);
					c.uihtml.push(f.uispan("秒"));
				  break;
				default:
					c.uihtml.push(days);
					c.uihtml.push(f.uispan(":"));
					c.uihtml.push(hours);
					c.uihtml.push(f.uispan(":"));
					c.uihtml.push(minutes);
					c.uihtml.push(f.uispan(":"));
					c.uihtml.push(seconds);
				};
				c.uihtml.push(f.uispan(c.stateb,"curb"));
				if(c.isEnd){
					_this.html(f.uispan("已结束","isend"));
					window.clearTimeout(f.timeout);
				}else {
					_this.html(c.uihtml.join(""));//console.log(c.uihtml.join(""));
					f.timeout = window.setTimeout(f.ui,1000)
				}
			};
		f.ui();
		})
	};
	//倒计时插件结束
//启动断点调试语句
//debugger;

})(Zepto, window);
//载入DATA模块
;(function($){
  var data = {}, dataAttr = $.fn.data, camelize = $.camelCase,
    exp = $.expando = 'Zepto' + (+new Date()), emptyArray = [];

  // Get value from node:
  // 1. first try key as given,
  // 2. then try camelized key,
  // 3. fall back to reading "data-*" attribute.
  function getData(node, name) {
    var id = node[exp], store = id && data[id];
    if (name === undefined) return store || setData(node)
    else {
      if (store) {
        if (name in store) return store[name];
        var camelName = camelize(name);
        if (camelName in store) return store[camelName]
      };
      return dataAttr.call($(node), name)
    }
  };

  // Store value under camelized key on node
  function setData(node, name, value) {
    var id = node[exp] || (node[exp] = ++$.uuid),
      store = data[id] || (data[id] = attributeData(node));
    if (name !== undefined) store[camelize(name)] = value;
    return store
  };

  // Read all "data-*" attributes from a node
  function attributeData(node) {
    var store = {};
    $.each(node.attributes || emptyArray, function(i, attr){
      if (attr.name.indexOf('data-') == 0)
        store[camelize(attr.name.replace('data-', ''))] = $.zepto.deserializeValue(attr.value)
    });
    return store
  };

  $.fn.data = function(name, value) {
    return value === undefined ?
      // set multiple values via object
      $.isPlainObject(name) ?
        this.each(function(i, node){
          $.each(name, function(key, value){ setData(node, key, value) })
        }) :
        // get value from first element
        (0 in this ? getData(this[0], name) : undefined) :
      // set value on all elements
      this.each(function(){ setData(this, name, value) })
  };

  $.fn.removeData = function(names) {
    if (typeof names == 'string') names = names.split(/\s+/)
    return this.each(function(){
      var id = this[exp], store = id && data[id];
      if (store) $.each(names || store, function(key){
        delete store[names ? camelize(this) : key]
      })
    })
  };

  // Generate extended `remove` and `empty` functions
  ;['remove', 'empty'].forEach(function(methodName){
    var origFn = $.fn[methodName];
    $.fn[methodName] = function() {
      var elements = this.find('*');
      if (methodName === 'remove') elements = elements.add(this);
      elements.removeData();
      return origFn.call(this)
    }
  })
})(Zepto)